Grading at Wed Aug 14 17:27:17 UTC 2019
Running 'make clean' to do a clean build of your project
rm -rf *.o poker *~
Running 'make poker OTHERFLAGS=-O3' to build your project
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o cards.o cards.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o deck.o deck.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o eval.o eval.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o future.o future.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o input.o input.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o main.o main.c
gcc -o poker -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 cards.o deck.o eval.o future.o input.o main.o
 - Starting with some Texas Hold'em hands
Running a simulation with 20000 draws for 2 hands...
    Hand 0 was close enough to our answer
    Hand 1 was close enough to our answer
    Test case passed!    
Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==357== Memcheck, a memory error detector
==357== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==357== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==357== Command: ./poker inp.txt 25000
==357== Parent PID: 356
==357== 
==357== Invalid read of size 8
==357==    at 0x400BA4: main (main.c:63)
==357==  Address 0x5206488 is 0 bytes after a block of size 24 alloc'd
==357==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==357==    by 0x403555: read_input (input.c:62)
==357==    by 0x400AA8: main (main.c:37)
==357== 
==357== Invalid read of size 8
==357==    at 0x4031B6: compare_hands (eval.c:232)
==357==    by 0x400BAC: main (main.c:63)
==357==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==357== 
==357== 
==357== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==357==  Access not within mapped region at address 0x8
==357==    at 0x4031B6: compare_hands (eval.c:232)
==357==    by 0x400BAC: main (main.c:63)
==357==  If you believe this happened as a result of a stack
==357==  overflow in your program's main thread (unlikely but
==357==  possible), you can try to increase the size of the
==357==  main thread stack using the --main-stacksize= flag.
==357==  The main thread stack size used in this run was 8388608.
==357== 
==357== HEAP SUMMARY:
==357==     in use at exit: 1,928 bytes in 84 blocks
==357==   total heap usage: 1,707 allocs, 1,623 frees, 62,352 bytes allocated
==357== 
==357== LEAK SUMMARY:
==357==    definitely lost: 40 bytes in 2 blocks
==357==    indirectly lost: 584 bytes in 33 blocks
==357==      possibly lost: 0 bytes in 0 blocks
==357==    still reachable: 1,304 bytes in 49 blocks
==357==         suppressed: 0 bytes in 0 blocks
==357== Rerun with --leak-check=full to see details of leaked memory
==357== 
==357== For counts of detected and suppressed errors, rerun with: -v
==357== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==362== Memcheck, a memory error detector
==362== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==362== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==362== Command: ./poker inp2.txt 25000
==362== Parent PID: 361
==362== 
==362== Invalid read of size 8
==362==    at 0x400BA4: main (main.c:63)
==362==  Address 0x5206488 is 0 bytes after a block of size 24 alloc'd
==362==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==362==    by 0x403555: read_input (input.c:62)
==362==    by 0x400AA8: main (main.c:37)
==362== 
==362== Invalid read of size 8
==362==    at 0x4031B6: compare_hands (eval.c:232)
==362==    by 0x400BAC: main (main.c:63)
==362==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==362== 
==362== 
==362== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==362==  Access not within mapped region at address 0x8
==362==    at 0x4031B6: compare_hands (eval.c:232)
==362==    by 0x400BAC: main (main.c:63)
==362==  If you believe this happened as a result of a stack
==362==  overflow in your program's main thread (unlikely but
==362==  possible), you can try to increase the size of the
==362==  main thread stack using the --main-stacksize= flag.
==362==  The main thread stack size used in this run was 8388608.
==362== 
==362== HEAP SUMMARY:
==362==     in use at exit: 1,928 bytes in 84 blocks
==362==   total heap usage: 4,195 allocs, 4,111 frees, 132,016 bytes allocated
==362== 
==362== LEAK SUMMARY:
==362==    definitely lost: 40 bytes in 2 blocks
==362==    indirectly lost: 584 bytes in 33 blocks
==362==      possibly lost: 0 bytes in 0 blocks
==362==    still reachable: 1,304 bytes in 49 blocks
==362==         suppressed: 0 bytes in 0 blocks
==362== Rerun with --leak-check=full to see details of leaked memory
==362== 
==362== For counts of detected and suppressed errors, rerun with: -v
==362== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 2 hands...
    Hand 0 was close enough to our answer
    Hand 1 was close enough to our answer
    Test case passed!    
Running a simulation with 80000 draws for 4 hands...
    Hand 0 was close enough to our answer
    Hand 1 was close enough to our answer
    Hand 2 was close enough to our answer
    Hand 3 was close enough to our answer
    Test case passed!    
Running a simulation with 30000 draws for 2 hands...
    Hand 0 was close enough to our answer
    Hand 1 was close enough to our answer
    Test case passed!    
 - Next, few Seven Card Stud hands
Running a simulation with 30000 draws for 2 hands...
    Hand 0 was close enough to our answer
    Hand 1 was close enough to our answer
    Test case passed!    
Running a simulation with 40000 draws for 3 hands...
Could not find the win percent in your output
Could not find the win percent in your output
Could not find the win percent in your output
You dont seem to have the right total draws.
Yours sum to 0 but I expected 40000
 - Then one from a completely made up poker variant
Running a simulation with 100000 draws for 6 hands...
Valgrind reported errors:
==666== Memcheck, a memory error detector
==666== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==666== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==666== Command: ./poker whacky.txt 100000
==666== Parent PID: 665
==666== 
==666== Invalid read of size 8
==666==    at 0x400BA4: main (main.c:63)
==666==  Address 0x52077f0 is 0 bytes after a block of size 48 alloc'd
==666==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==666==    by 0x403555: read_input (input.c:62)
==666==    by 0x400AA8: main (main.c:37)
==666== 
==666== Invalid read of size 8
==666==    at 0x4031B6: compare_hands (eval.c:232)
==666==    by 0x400BAC: main (main.c:63)
==666==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==666== 
==666== 
==666== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==666==  Access not within mapped region at address 0x8
==666==    at 0x4031B6: compare_hands (eval.c:232)
==666==    by 0x400BAC: main (main.c:63)
==666==  If you believe this happened as a result of a stack
==666==  overflow in your program's main thread (unlikely but
==666==  possible), you can try to increase the size of the
==666==  main thread stack using the --main-stacksize= flag.
==666==  The main thread stack size used in this run was 8388608.
==666== 
==666== HEAP SUMMARY:
==666==     in use at exit: 2,152 bytes in 98 blocks
==666==   total heap usage: 645 allocs, 547 frees, 29,512 bytes allocated
==666== 
==666== LEAK SUMMARY:
==666==    definitely lost: 64 bytes in 2 blocks
==666==    indirectly lost: 1,008 bytes in 61 blocks
==666==      possibly lost: 0 bytes in 0 blocks
==666==    still reachable: 1,080 bytes in 35 blocks
==666==         suppressed: 0 bytes in 0 blocks
==666== Rerun with --leak-check=full to see details of leaked memory
==666== 
==666== For counts of detected and suppressed errors, rerun with: -v
==666== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
